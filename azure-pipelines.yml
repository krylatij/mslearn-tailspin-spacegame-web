trigger:
- '*'

#pool:
#  name: 'MyAgentPool'
#  demands:
#  - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '5.x'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  pool:
    vmImage: 'ubuntu-20.04'
    demands:
      - npm

  jobs: 
  - job: 'Build'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: NuGetToolInstaller@0
      inputs:
        versionSpec: '5.9.1'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: NuGetCommand@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        restoreSolution: '**/*.sln'
        feedsToUse: 'select'
        vstsFeed: '$(System.TeamProject)/Tailspin.SpaceGame.Web.Models'

    - task: DotNetCoreCLI@2
      displayName: 'Install .NET tools from local manifest'
      inputs:
        command: custom
        custom: tool
        arguments: 'restore'

    - template: templates/build.yml
      parameters:
        buildConfiguration: 'Debug'
        calculateCoverage: false

    - template: templates/build.yml
      parameters:
        buildConfiguration: 'Release'
        calculateCoverage: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      condition: succeeded()

- stage: 'Deploy_DEV'
  displayName: 'Deploy the web application on DEV'
  dependsOn: Build
  condition: succeeded()
  jobs: 
    - template: templates/deploy.yml
      parameters:
        buildConfiguration: 'Release'
        env: 'dev'

- stage: 'Deploy_Staging'
  displayName: 'Deploy the web application on Stagin'
  dependsOn: Deploy_DEV
  condition: succeeded()
  jobs: 
    - template: templates/deploy.yml
      parameters:
        buildConfiguration: 'Release'
        env: 'staging'
        dotnetSdkVersion: $(dotnetSdkVersion)

    - job: RunLoadTests
      dependsOn: Deploy
      displayName: 'Run load tests'
      pool:
        vmImage: 'ubuntu-20.04'
      variables:
      - group: staging
      steps:
      - script: |
          wget -c ftp.ps.pl/pub/apache/jmeter/binaries/apache-jmeter-$(jmeterVersion).tgz
          tar -xzf apache-jmeter-$(jmeterVersion).tgz
        displayName: 'Install Apache JMeter'
      - script: apache-jmeter-$(jmeterVersion)/bin/./jmeter -n -t LoadTest.jmx -o Results.xml -Jhostname=$(JMETER_HOSTNAME)
        displayName: 'Run Load tests'
      - script: |
          sudo apt-get update
          sudo apt-get install xsltproc
          xsltproc JMeter2JUnit.xsl Results.xml > JUnit.xml
        displayName: 'Transform JMeter output to JUnit'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: JUnit.xml
      
